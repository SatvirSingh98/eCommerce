When to use QuerySet?
--> If you want to be able perform some operation on an existing queryset in a chain of queryset calls you can use a QuerySet.
--> In ProductQuerySet we overide the all() method to get filtered by active items.
--> ModelManager functions are used like this:
    eg: Product.objects.featured() similar to default manager
--> QuerySet in models are used for chaining functionality to default ones.
    eg: Product.objects.get_featured().active()
--> We can also alter the functionality of default ones using QuerySet functions in models.
    eg: Like we alter all() func using active() QuerySet func by overriding get_queryset() func in Product model manager.

Now for using unique slug names we have used utils.py along with django signals.
--> pre_save is used to do something before the model is saved in the database. So unique slugs
    are created aotomatically before instance is saved.

For search functionality:
--> Either we can use {{ request.GET.q }} in the template or
--> We can set query parameter using get_context_method:
    --> context['query'] = self.request.GET.q
    --> and then in the template use {{ query }}
    --> better to use context method as we can add more logic to it through views.

Search bar on page will come from same snippet file for same functionality.
We will implement queries using Q from model managers.

For different search-tags we will create Tag app seperately.
--> To set relation between Product and ProductTag we will use ManyToManyField relation.

Now to do a reverse lookup, i.e, how to get product based on tag or vice-versa.
--> Run the following commands in the shell to understand:
    1. from apps.tags.models import ProductTag
    2. ProductTag.objects.all()
    3. Choose any: shirt = ProductTag.objects.last()
    4. shirt.__dict__
    5. shirt.products.all() :- this will give all the related products.
    6. shirt.products.all().first()

    For reverse of the above:
    1. from apps.products.models import Product
    2. Product.objects.all()
    3. Choose any: shirt = Product.objects.first()
    4. shirt.__dict__
    5. shirt.<related model name in lowercase without spaces>_set.all(): shirt.producttag_set.all()
    6. shirt.producttag_set.filter(title__icontains='t-shirt<or any other tag>'): it will give the product.
--> To add this to search: Q(<model_name>__title__icontains='query')

To save the products in the cart for a certain period of time we will use sessions.
--> dictionary values.
--> request.session will give the info of session of current user.
--> request.session.session_key will give the current session's key.
--> when the user logout the session ends.
--> we can set variable to session dictionary in different view and can use it on another   view.
eg.- request.session['name'] = 'satvir' in cart view and we can use it in index view or any other view using request.session.get('name')

In the cart functionality:
--> First we check if the cart_id exists or not.

How django works with sessions:
--> We start the browser, request the page from django and then it creates a new session.
--> That session data is stores in database as session_key, session_data and it's expiry_date.
--> Then django will return the requested page with session_key.
--> In frontend we store that session_key in a cookie.
--> By doing this, action performed by user to change it's data in frontend will also get changed in database.
    --> If user change the data, a request and session_key of that user is sent to django and the corresponding session_data is modified in database.
    --> Changes in the browser are reflected on page refresh and redirect.
    --> To prevent refreshing everytime we can use AJAX.
 ```
 from django.contrib.sessions.models import Session
 s = Session.objects.get(pk='session_key')
 s.get_decoded()
 ```

 When we retrieve the cart_id it will give the latest cart_id.
 To delete the other cart_id(s): Cart.objects.exclude(id=cart_id).delete()

 In the cart functionality:
--> First we check if the cart_id exists or not.
--> If the cart_id does not exist create a new one and set it to the session.
--> If it already exists then set that id to the session.
--> To delete a session => del request.session['cart_id']